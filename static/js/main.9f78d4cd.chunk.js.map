{"version":3,"sources":["App.js","index.js"],"names":["generateId","v4","TodoForm","props","className","onSubmit","getTodo","name","id","type","placeholder","autoComplete","error","TodoListItem","title","onClick","e","toggleTodo","stopPropagation","deleteTodo","TodoList","todos","map","todo","App","preventDefault","target","elements","value","trim","validationHandler","userInput","isNotTodo","state","find","console","log","setState","prevState","errorMessage","createTodo","bind","isCompleted","this","concat","filter","updateTodo","getNotCompleted","getCompleted","React","Component","ReactDOM","render","document","getElementById","rootElement"],"mappings":"+NAwCMA,EAAaC,IAEnB,SAASC,EAASC,GAChB,OACE,uBAAMC,UAAU,mBAAmBC,SAAUF,EAAMG,QAAnD,UACE,mDACA,uBACEC,KAAK,YACLC,GAAG,WACHC,KAAK,OACLC,YAAY,yBACZC,aAAa,QAEdR,EAAMS,MACP,wBAAQR,UAAU,aACVK,KAAK,SADb,4BAUN,SAASI,EAAaV,GACpB,IAAQI,EAAaJ,EAAbI,KAAMC,EAAOL,EAAPK,GAGd,OACE,sBAAKJ,UAAWD,EAAMW,MAAQ,QAASC,QAAS,SAACC,GAAD,OAAMb,EAAMc,WAAWT,IAAvE,UACE,+BAAOD,IACP,wBAAQQ,QAAS,SAACC,GAAOA,EAAEE,kBAAmBf,EAAMgB,WAAWX,IAA/D,kBAKN,SAASY,EAASjB,GAChB,OACE,sBAAKC,UAAWD,EAAMW,MAAQ,QAA9B,UACE,+BAAKX,EAAMW,MAAX,OAEEX,EAAMkB,MAAMC,KAAI,SAACC,GAAD,OAAW,cAACV,EAAD,CAEzBN,KAAOgB,EAAKhB,KACZC,GAAMe,EAAKf,GACXW,WAAchB,EAAMgB,WACpBF,WAAcd,EAAMc,WACpBH,MAASX,EAAMW,OALVS,EAAKf,U,IAcdgB,E,kDACJ,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IAoDRG,QAAU,SAACU,GACTA,EAAES,iBACF,IAAIF,EAAOP,EAAEU,OAAOC,SAAS,aAAaC,MAAMC,OAChD,EAAKC,kBAAkBP,GACvBP,EAAEU,OAAOC,SAAS,aAAaC,MAAQ,IAzDtB,EAoFnBE,kBAAoB,SAACC,GACnB,IAAIC,EAAY,EAAKC,MAAMZ,MAAMa,MAAK,SAACX,GAAD,OAAUA,EAAKhB,OAASwB,KAC9DI,QAAQC,IAAIJ,GACK,KAAdD,EACD,EAAKM,UAAS,SAACC,GAAD,MAAgB,CAC5BC,aAAc,mEAGVP,EAEN,EAAKK,UAAS,SAACC,GAAD,MAAgB,CAC5BC,aAAc,4EAKhB,EAAKF,UAAS,SAACC,GAAD,MAAgB,CAC5BC,aAAc,OAEhB,EAAKC,WAAWT,KApGlB,EAAKZ,WAAa,EAAKA,WAAWsB,KAAhB,gBAClB,EAAKxB,WAAa,EAAKA,WAAWwB,KAAhB,gBAClB,EAAKX,kBAAoB,EAAKA,kBAAkBW,KAAvB,gBAEzB,EAAKR,MAAQ,CACXZ,MAAO,CACL,CACEb,GAAI,QACJD,KAAM,kBACNmC,aAAa,GAEf,CACElC,GAAI,QACJD,KAAM,qBACNmC,aAAa,GAEf,CACElC,GAAI,QACJD,KAAM,WACNmC,aAAa,GAEf,CACElC,GAAI,QACJD,KAAM,gBACNmC,aAAa,GAEf,CACElC,GAAI,QACJD,KAAM,sBACNmC,aAAa,GAEf,CACElC,GAAI,QACJD,KAAM,cACNmC,aAAa,IAGjBH,aAAc,IAxCC,E,8CA6CnB,SAAWhC,GACToC,KAAKN,UAAS,SAACC,GAAD,MAAe,CAC3BjB,MAAQiB,EAAUjB,MAAMuB,OAAO,CAAEpC,GAAKR,IAAaO,OAAMmC,aAAa,QAGxEP,QAAQC,IAAIO,KAAKV,MAAMZ,S,wBAUzB,SAAWb,GACPmC,KAAKN,UAAS,SAACC,GAAD,MAAgB,CAC1BjB,MAAQiB,EAAUjB,MAAMwB,QAAO,SAACtB,GAAD,OAAUA,EAAKf,KAAOA,W,wBAK7D,SAAWA,GACT,IAAIsC,EAAaH,KAAKV,MAAMZ,MAAMa,MAAK,SAACX,GAAD,OAAUA,EAAKf,KAAOA,KAC7DsC,EAAWJ,aAAeI,EAAWJ,YAErCC,KAAKN,UAAS,SAACC,GAAD,MAAgB,CAC1BjB,MAAQiB,EAAUjB,MAAMwB,QAAO,SAACtB,GAAD,OAAUA,EAAKf,KAAOA,KAAIoC,OAAOE,S,6BAItE,WACI,OAAOH,KAAKV,MAAMZ,MAAMwB,QAAO,SAACtB,GAAD,OAAgC,IAArBA,EAAKmB,iB,0BAGnD,WACE,OAAOC,KAAKV,MAAMZ,MAAMwB,QAAO,SAACtB,GAAD,OAAgC,IAArBA,EAAKmB,iB,oBA4BjD,WACE,OACE,sBAAKtC,UAAU,UAAf,UACE,oBAAIA,UAAU,QAAd,sBACA,cAACF,EAAD,CAAUI,QAASqC,KAAKrC,QACdM,MAAO+B,KAAKV,MAAMM,eAC5B,sBAAKnC,UAAU,gBAAf,UACE,cAACgB,EAAD,CACMC,MAAOsB,KAAKI,kBACZ5B,WAAYwB,KAAKxB,WACjBL,MAAM,OACNG,WAAY0B,KAAK1B,WACjBa,kBAAmBa,KAAKb,oBAC9B,cAACV,EAAD,CACMC,MAAOsB,KAAKK,eACZ7B,WAAYwB,KAAKxB,WACjBL,MAAM,YACNG,WAAY0B,KAAK1B,WACjBa,kBAAmBa,KAAKb,8B,GAhItBmB,IAAMC,WAuIxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAElC9B,QCpOT+B,EAAcF,SAASC,eAAe,QAC5CH,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFG,K","file":"static/js/main.9f78d4cd.chunk.js","sourcesContent":["import \"./styles.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n/*\n\n  ------ GETTING STARTED ------\n\n  In order to begin this challenge, you must first:\n   - Signup for a Codepen account and log in.\n   - Fork this pen to create a personal copy of the challenge by clicking the \"Fork\" button at the bottom of the browser window.\n   \n  \n  ----- SUBMISSION INSTRUCTIONS -----\n  \n  To submit your work:\n   - Make sure to save your work by clicking the \"Save\" button at the top of the browser window.\n   - Email the URL of your forked pen to talent@ender.com\n\n\n   --------- THE CHALLENGE ---------\n  \n  Build a todo list application.\n  \n  1. Display completed and unfinished todos in separate lists.\n  \n  2. Clicking on a todo item should toggle its completed status.\n  \n  3. Clicking on the \"X\" button of a todo item should remove that todo entirely.\n  \n  4. The todo form should be able to create a new todo and add it to the list of todos.\n  \n  5. Use the SCSS panel to match the styles from this example:\n     https://ender-public-dev.s3.us-east-2.amazonaws.com/files/ad94e4e0e1fb41c4b517b2971902bf35\n\n*/\n\nimport { v4 } from \"uuid\";\n\n// // use \"generateId()\" function to create a unique id\nconst generateId = v4;\n\nfunction TodoForm(props) {\n  return (\n    <form className=\"create-todo-form\" onSubmit={props.getTodo}>\n      <h2>Create a New Todo</h2>\n      <input\n        name=\"todo-name\"\n        id=\"todoName\"\n        type=\"text\"\n        placeholder=\"Enter todo description\"\n        autoComplete=\"off\"\n      />\n      {props.error}\n      <button className=\"submit-btn\" \n              type=\"submit\" >\n        Create Todo\n      </button>\n    </form>\n  );\n}\n\n\n\nfunction TodoListItem(props) {\n  const { name, id } = props;\n  // toggle item's completed status on name click.\n  // delete item on \"X\" click.\n  return (\n    <div className={props.title + \"-item\"} onClick={(e) =>props.toggleTodo(id)} >\n      <span>{name}</span>\n      <button onClick={(e) => {e.stopPropagation(); props.deleteTodo(id)}}>X</button>\n    </div>\n  );\n}\n\nfunction TodoList(props) {\n  return (\n    <div className={props.title + \"-list\"}>\n      <h2>{props.title}:</h2>\n      {\n        props.todos.map((todo) => (<TodoListItem \n          key={todo.id}\n          name ={todo.name}\n          id = {todo.id}\n          deleteTodo = {props.deleteTodo}\n          toggleTodo = {props.toggleTodo}\n          title = {props.title}\n          />))\n      }\n    </div>\n  );\n}\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.deleteTodo = this.deleteTodo.bind(this)\n    this.toggleTodo = this.toggleTodo.bind(this)\n    this.validationHandler = this.validationHandler.bind(this)\n\n    this.state = {\n      todos: [\n        {\n          id: \"asdfv\",\n          name: \"Practice Guitar\",\n          isCompleted: false\n        },\n        {\n          id: \"gsdfw\",\n          name: \"Take out Recycling\",\n          isCompleted: false\n        },\n        {\n          id: \"23gsd\",\n          name: \"Exercise\",\n          isCompleted: false\n        },\n        {\n          id: \"6ghsd\",\n          name: \"Buy Groceries\",\n          isCompleted: false\n        },\n        {\n          id: \"dfg83\",\n          name: \"Send Birthday Cards\",\n          isCompleted: true\n        },\n        {\n          id: \"y84cd\",\n          name: \"Sweep Porch\",\n          isCompleted: true\n        }\n      ],\n      errorMessage: \"\"\n    };\n  }\n\n\n  createTodo(name) {\n    this.setState((prevState) =>({\n      todos : prevState.todos.concat({ id : generateId(),name, isCompleted: false})\n    }))\n\n    console.log(this.state.todos)\n  }\n\n  getTodo = (e) => {\n    e.preventDefault()\n    let todo = e.target.elements['todo-name'].value.trim()\n    this.validationHandler(todo)\n    e.target.elements['todo-name'].value = \"\"\n  }\n\n  deleteTodo(id) {\n      this.setState((prevState) => ({\n          todos : prevState.todos.filter((todo) => todo.id !== id)\n      }))\n  }\n  \n\n  toggleTodo(id) {\n    let updateTodo = this.state.todos.find((todo) => todo.id === id)\n    updateTodo.isCompleted = !updateTodo.isCompleted\n    \n    this.setState((prevState) => ({\n        todos : prevState.todos.filter((todo) => todo.id !== id).concat(updateTodo)\n    }))\n  }\n\n  getNotCompleted(){\n      return this.state.todos.filter((todo) => (todo.isCompleted === false))\n  }\n\n  getCompleted(){\n    return this.state.todos.filter((todo) => (todo.isCompleted === true))\n  }\n\n  validationHandler = (userInput) => {\n    let isNotTodo = this.state.todos.find((todo) => todo.name === userInput)\n    console.log(isNotTodo)\n    if(userInput === \"\"){\n      this.setState((prevState) => ({\n        errorMessage: <strong>Please enter a todo item!</strong>\n      }))\n    }\n    else if(isNotTodo)\n    {\n      this.setState((prevState) => ({\n        errorMessage: <strong>This is already on the todo list!</strong>\n      }))\n    }\n    else\n    {\n      this.setState((prevState) => ({\n        errorMessage: \"\"\n      }))\n      this.createTodo(userInput)\n    }\n  }\n\n \n\n  render() {\n    return (\n      <div className=\"content\">\n        <h1 className=\"title\">Todo App</h1>\n        <TodoForm getTodo={this.getTodo}\n                  error={this.state.errorMessage}/>\n        <div className=\"lists-wrapper\">\n          <TodoList \n                todos={this.getNotCompleted()} \n                deleteTodo={this.deleteTodo} \n                title=\"Todo\" \n                toggleTodo={this.toggleTodo}\n                validationHandler={this.validationHandler}/>\n          <TodoList \n                todos={this.getCompleted()} \n                deleteTodo={this.deleteTodo} \n                title=\"Completed\" \n                toggleTodo={this.toggleTodo}\n                validationHandler={this.validationHandler}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nexport default App;","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}